# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'createSample.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import *
from sklearn.feature_extraction.text import CountVectorizer
import pickle

class quoraDialog(QtWidgets.QMainWindow):

    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)


    def setupUi(self):
        uic.loadUi('quora.ui', self)
        widget = QtWidgets.QWidget()
        widget.setLayout(self.layout)
        self.setCentralWidget(widget)
        self.methodOpt = textSpinBox(self.centralwidget)
        self.methodOpt.setObjectName("methodOpt")
        self.verticalLayout.insertWidget(1, self.methodOpt)
        self.CheckBtn.clicked.connect(self.runClassification)
        
    def runClassification(self):
        method = self.methodOpt.textFromValue(self.methodOpt.value())
        self.classLabel.setText(method)
        inputData = self.questionInput.toPlainText()
        if inputData == "":
            self.questionInput.setPlainText("")
            return
        if method == 'Naive Bayes':
            print("method")
            loaded_vec = CountVectorizer(decode_error="replace",vocabulary=pickle.load(open("feature.pkl", "rb")))
            vectorizedQuestion = loaded_vec.fit_transform(["how could black people dominate the wolrd"])
            loaded_model = pickle.load(open('nbc.pickle', 'rb'))
            anws = loaded_model.predict(vectorizedQuestion)
            if anws[0] == 1:
                self.classLabel.setText("Insincere")
            else:
                self.classLabel.setText("Sincere")
        elif method == '':
            pass
        self.questionInput.setPlainText("")

    def showErrorPopup(self, error):
        msg = QtWidgets.QMessageBox()
        msg.setText(str(error))
        msg.exec_()


class textSpinBox(QSpinBox):
    def __init__(self, parent=None):
        super(textSpinBox, self).__init__(parent)
        self.set_list_string()

    def set_list_string(self, strings=None):
        if strings is not None:
            self.list_text = strings
        else:
            self.list_text = ["SVM", "Logistic Regression", "Naive Bayes", "Deep Learning"]
        self.setRange(0, len(self.list_text) - 1)

    def textFromValue(self, value):
        return self.list_text[value]

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = quoraDialog()
    ui.setupUi()
    ui.show()
    sys.exit(app.exec_())
